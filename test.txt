provider "google" {
  credentials = file("path/to/your-service-account-key.json")
  project     = var.project_id
  region      = var.region
}

# VPC Network Setup
resource "google_compute_network" "vpc_network" {
  name                    = "private-vpc"
  auto_create_subnetworks  = false
}

resource "google_compute_subnetwork" "subnet" {
  name          = "private-subnet"
  ip_cidr_range = "10.0.0.0/24"
  region        = var.region
  network       = google_compute_network.vpc_network.id
  private_ip_google_access = true
}

# GKE Private Cluster Setup
resource "google_container_cluster" "private_cluster" {
  name               = "private-cluster"
  location           = var.region
  initial_node_count = 3

  private_cluster_config {
    enable_private_nodes    = true
    enable_private_endpoint = false
    master_ipv4_cidr_block  = "10.0.0.0/28"
  }

  ip_allocation_policy {}

  network    = google_compute_network.vpc_network.id
  subnetwork = google_compute_subnetwork.subnet.id

  remove_default_node_pool = true
}

resource "google_container_node_pool" "primary_nodes" {
  cluster    = google_container_cluster.private_cluster.name
  location   = google_container_cluster.private_cluster.location
  node_count = 3

  node_config {
    machine_type = "e2-medium"
    oauth_scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }
}

# Kubernetes Ingress for Frontend (Custom URL)
resource "kubernetes_ingress" "frontend_ingress" {
  metadata {
    name      = "frontend-ingress"
    namespace = "default"
    annotations = {
      "kubernetes.io/ingress.class" = "gce"
      "networking.gke.io/managed-certificates" = kubernetes_managed_certificate.frontend_cert.metadata[0].name
    }
  }

  spec {
    rule {
      host = var.custom_domain  # Custom domain for frontend

      http {
        path {
          path     = "/"
          path_type = "Prefix"

          backend {
            service_name = kubernetes_service.frontend_service.metadata[0].name
            service_port = 80
          }
        }
      }
    }
  }
}

# Managed Certificate for HTTPS
resource "kubernetes_managed_certificate" "frontend_cert" {
  metadata {
    name = "frontend-certificate"
    namespace = "default"
  }

  spec {
    domains = [var.custom_domain]
  }
}

# Kubernetes Backend Deployment
resource "kubernetes_deployment" "backend_deployment" {
  metadata {
    name      = "backend-deployment"
    namespace = "default"
  }

  spec {
    replicas = 2

    selector {
      match_labels = {
        app = "backend"
      }
    }

    template {
      metadata {
        labels = {
          app = "backend"
        }
      }

      spec {
        container {
          name  = "backend"
          image = "gcr.io/${var.project_id}/go-backend:latest"
          ports {
            container_port = 8080
          }
        }
      }
    }
  }
}

# Internal Load Balancer for Backend
resource "kubernetes_service" "backend_service" {
  metadata {
    name        = "backend-service"
    namespace   = "default"
    annotations = {
      "cloud.google.com/load-balancer-type" = "Internal"
    }
  }

  spec {
    selector = {
      app = "backend"
    }

    port {
      port        = 80
      target_port = 8080
    }

    type = "LoadBalancer"
  }
}

# Kubernetes Frontend Deployment
resource "kubernetes_deployment" "frontend_deployment" {
  metadata {
    name      = "frontend-deployment"
    namespace = "default"
  }

  spec {
    replicas = 2

    selector {
      match_labels = {
        app = "frontend"
      }
    }

    template {
      metadata {
        labels = {
          app = "frontend"
        }
      }

      spec {
        container {
          name  = "frontend"
          image = "gcr.io/${var.project_id}/react-frontend:latest"
          ports {
            container_port = 3000
          }
          env {
            name  = "REACT_APP_BACKEND_URL"
            value = "http://${kubernetes_service.backend_service.status[0].load_balancer.ingress[0].ip}:80"
          }
        }
      }
    }
  }
}

# Internal Load Balancer for Frontend
resource "kubernetes_service" "frontend_service" {
  metadata {
    name        = "frontend-service"
    namespace   = "default"
    annotations = {
      "cloud.google.com/load-balancer-type" = "Internal"
    }
  }

  spec {
    selector = {
      app = "frontend"
    }

    port {
      port        = 80
      target_port = 3000
    }

    type = "LoadBalancer"
  }
}
