provider "google" {
  credentials = file("path/to/your-service-account-key.json")
  project     = var.project_id
  region      = var.region
}

# ---------------------------
# VPC Network Setup
# ---------------------------
resource "google_compute_network" "vpc_network" {
  name                    = "private-vpc"
  auto_create_subnetworks  = false
}

resource "google_compute_subnetwork" "subnet" {
  name          = "private-subnet"
  ip_cidr_range = "10.0.0.0/24"
  region        = var.region
  network       = google_compute_network.vpc_network.id
  private_ip_google_access = true  # Enable private Google access
}

# ---------------------------
# GKE Private Cluster Setup
# ---------------------------
resource "google_container_cluster" "private_cluster" {
  name               = "private-cluster"
  location           = var.region
  initial_node_count = 3

  # Enable Private Cluster
  private_cluster_config {
    enable_private_nodes    = true
    enable_private_endpoint = false  # Only internal access
    master_ipv4_cidr_block  = "10.0.0.0/28"
  }

  # IP Allocation
  ip_allocation_policy {}

  # Network Settings
  network    = google_compute_network.vpc_network.id
  subnetwork = google_compute_subnetwork.subnet.id

  remove_default_node_pool = true
}

# Node pool for the private cluster
resource "google_container_node_pool" "primary_nodes" {
  cluster    = google_container_cluster.private_cluster.name
  location   = google_container_cluster.private_cluster.location
  node_count = 3

  node_config {
    machine_type = "e2-medium"
    oauth_scopes = ["https://www.googleapis.com/auth/cloud-platform"]
  }
}

# ---------------------------
# Deploy Backend Service with Internal Load Balancer
# ---------------------------
resource "kubernetes_service" "backend_service" {
  metadata {
    name        = "backend-service"
    namespace   = "default"
    annotations = {
      "cloud.google.com/load-balancer-type" = "Internal"
    }
  }

  spec {
    selector = {
      app = "backend"
    }

    port {
      port        = 80
      target_port = 8080  # The port your Go backend runs on
    }

    type = "LoadBalancer"
  }
}

# Kubernetes Backend Deployment
resource "kubernetes_deployment" "backend_deployment" {
  metadata {
    name      = "backend-deployment"
    namespace = "default"
  }

  spec {
    replicas = 2

    selector {
      match_labels = {
        app = "backend"
      }
    }

    template {
      metadata {
        labels = {
          app = "backend"
        }
      }

      spec {
        container {
          name  = "backend"
          image = "gcr.io/${var.project_id}/go-backend:latest"  # Replace with your image
          ports {
            container_port = 8080
          }
        }
      }
    }
  }
}

# ---------------------------
# Deploy Frontend Service with Internal Load Balancer
# ---------------------------
resource "kubernetes_service" "frontend_service" {
  metadata {
    name        = "frontend-service"
    namespace   = "default"
    annotations = {
      "cloud.google.com/load-balancer-type" = "Internal"
    }
  }

  spec {
    selector = {
      app = "frontend"
    }

    port {
      port        = 80
      target_port = 3000  # The port your React frontend runs on
    }

    type = "LoadBalancer"
  }
}

# Kubernetes Frontend Deployment
resource "kubernetes_deployment" "frontend_deployment" {
  metadata {
    name      = "frontend-deployment"
    namespace = "default"
  }

  spec {
    replicas = 2

    selector {
      match_labels = {
        app = "frontend"
      }
    }

    template {
      metadata {
        labels = {
          app = "frontend"
        }
      }

      spec {
        container {
          name  = "frontend"
          image = "gcr.io/${var.project_id}/react-frontend:latest"  # Replace with your image
          ports {
            container_port = 3000
          }
        }
      }
    }
  }
}
